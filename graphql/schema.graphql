"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Account of a person who utilizes this application."
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime
}

type Category{
    id: ID!
    name: String!
    description: String
    children: [Category]!
}

type Product{
    id: ID!
    name: String!
    description: String!
    price: Float!
    category_id: ID!
    image_url: String
    created_at: DateTime!
}

type UserResponse{
    user: User
    message: String
    errors: [Error]!
}

type Error{
    field: String
    message: String
}

type VerifyEmailPayload{
    success: Boolean!
    message: String!
}

type Address {
    id: ID
    user_id: ID
    label: String
    name: String
    address_line1: String
    address_line2: String
    city: String
    state: String
    postal_code: String
    country: String
    phone_number: String
    created_at: DateTime
    updated_at: DateTime
}

type LogoutResponse {
    status: String!
    user: User!
}

type OrderResponse {
    order_id: ID
    message: String
}

type OrderHistoryResult {
    data: [Order]
    pagination: PaginationInfo!
}

type Order {
    id: ID!
    status: String
    total: Float
    items: [OrderItem]
    shipping_address: Address
    payment_method: PaymentMethod
    created_at: DateTime
    updated_at: DateTime
}

type OrderItem {
    product_id: ID
    name: String
    quantity: Int
    price: Float
    totalPrice: Float
}

type PaymentMethod {
    type: String
    last_four: String
}

type PaginationInfo {
    currentPage: Int
    lastPage: Int
    total: Int
}

type Response {
    success: Boolean!
    message: String!
}

enum Direction {
    ASC
    DESC
}

input SortingCriteria {
    field: String!
    direction: Direction!
}

input ListProductsInput {
    search: String
    sort:SortingCriteria
    category_id: ID
    page: Int
    count: Int
}

input OrderHistoryInput {
    page: Int
    status: String
    sort: SortingCriteria
}

input CheckoutInput {
    address_id: ID! @rules(apply: ["exists:addresses,id"])
    payment_method_id: ID! @rules(apply: ["exists:payment_methods,id"])
    cart_id: ID! @rules(apply: ["exists:carts,id"])
}

input CartItemInput {
    product_id: ID!
    quantity: Int!
}

input LoginInput {
    email: String! @rules(apply: ["email"]),
    password: String!
}

input RegisterUserInput {
    name: String! @rules(apply: ["max:255", "min:1"]),
    email: String! @rules(apply: ["email", "unique:users,email", "max:255"]),
    password: String! @rules(apply: ["confirmed", "min:8", "regex:/[a-zA-Z]/", "regex:/\\d/", "regex:/[@$!%*?&_]/"])
    password_confirmation: String!
}

input AddToCartInput {
    product_id: ID! @rules(apply: ["exists:products,id"]),
    quantity: Float! @rules(apply: ["min:0.1"])
}

input AddAddressInput {
    label: String! @rules(apply: ["max:255"]),
    name: String! @rules(apply: ["max:255"]),
    address_line1: String! @rules(apply: ["max:255"]),
    address_line2: String @rules(apply: ["max:255"]),
    city: String! @rules(apply: ["max:255"]),
    state: String! @rules(apply: ["max:255"]),
    postal_code: String! @rules(apply: ["max:255"]),
    country: String! @rules(apply: ["max:255"]),
    phone_number: String! @rules(apply: ["regex:/(0)[0-9]/", "not_regex:/[a-z]/", "min:9"])
}

input resendVerificationEmailInput {
    email: String! @rules(apply: ["email"])
}

input verifyEmailInput {
    token: String! @rules(apply: ["required"])
}

type Query{
    listCategories: [Category]! @field(resolver: "App\\GraphQL\\Queries\\ListCategories@resolve")

    products(
        input: ListProductsInput!
    ): [Product]! @field(resolver: "App\\GraphQL\\Queries\\ListProducts@resolve")

    orderHistory(
       input: OrderHistoryInput!
       ): OrderHistoryResult! @guard @canModel(model: "App\\Models\\User", ability: "access") @field(resolver:"App\\GraphQL\\Queries\\OrderHistory@resolve")

}

type Mutation {
    login(
      input: LoginInput!
    ): User!
    @field(resolver: "App\\GraphQL\\Mutations\\Login@resolve")

    registerUser(
        input: RegisterUserInput!
    ): UserResponse @field(resolver:"App\\GraphQL\\Mutations\\RegisterUser@resolve")

    verifyEmail(
        input: verifyEmailInput!
    ): VerifyEmailPayload  @field(resolver:"App\\GraphQL\\Mutations\\VerifyEmail@resolve")

    addToCart(
        input: AddToCartInput!
    ): UserResponse @guard  @field(resolver:"App\\GraphQL\\Mutations\\AddToCart@resolve")

    addAddress(
        input: AddAddressInput!
    ): Address @guard @field(resolver:"App\\GraphQL\\Mutations\\AddAddress@resolve")


    logout: LogoutResponse @guard  @field(resolver: "App\\GraphQL\\Mutations\\Logout@resolve")

    checkout(
        input: CheckoutInput!
    ): OrderResponse! @guard @canModel(model: "App\\Models\\User", ability: "access") @field(resolver:"App\\GraphQL\\Mutations\\Checkout@resolve")


    resendVerificationEmail(
        input: resendVerificationEmailInput!
        ): Response  @field(resolver:"App\\GraphQL\\Mutations\\resendVerificationEmail@resolve")
}


