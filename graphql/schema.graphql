directive @field(
    """
    A reference to the resolver function to be used.
    Consists of two parts: a class name and a method name, seperated by an `@` symbol.
    If you pass only a class name, the method name defaults to `__invoke`.
    """
    resolver: String!
) on FIELD_DEFINITION

directive @scalar(
    """
    Reference to a class that extends `\GraphQL\Type\Definition\ScalarType`.
    """
    class: String!
) on SCALAR


"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime
}


type Category{
    id: ID!
    name: String!
    description: String
    children: [Category]!
}


type Product{

    id: ID!
    name: String!
    description: String!
    price: Float!
    category_id: ID!
    image_url: String!
    created_at: DateTime!
}


type UserResponse{
    user: User
    message: String
    errors: [Error]!
}

type Error{
    field: String
    message: String
}




type VerifyEmailPayload{
    success: Boolean!
    message: String!
}


type Address {
    id: ID
    user_id: ID
    label: String
    name: String
    address_line1: String
    address_line2: String
    city: String
    state: String
    postal_code: String
    country: String
    phone_number: String
    created_at: DateTime
    updated_at: DateTime
}

type LogoutResponse {
    status: String!
    user: User!
}


input CheckoutInput {
    address_id: ID!
    payment_method_id: ID!
    cart_items: [CartItemInput!]!
}

input CartItemInput {
    product_id: ID!
    quantity: Int!
}

type OrderResponse {
    order_id: ID
    message: String
}

type OrderHistoryResult {
    data: [Order]
    pagination: PaginationInfo!
}



type Order {
    id: ID!
    status: String
    total: Float
    items: [OrderItem]
    shipping_address: Address
    payment_method: PaymentMethod
    created_at: DateTime
    updated_at: DateTime
}

type OrderItem {
    product_id: ID
    name: String
    quantity: Int
    price: Float
    total: Float
}

type PaymentMethod {
    type: String
    last_four: String
}

type PaginationInfo {
    currentPage: Int
    totalPages: Int
    totalItems: Int
}

type Query{
    listCategories: [Category]! @field(resolver: "App\\GraphQL\\Queries\\ListCategories@resolve")

    products(
        search: String
        sort:String
        category_id: ID
        page: Int
        count: Int
    ): [Product]! @field(resolver: "App\\GraphQL\\Queries\\ListProducts@resolve")

    orderHistory(
        page: Int,
        status: String,
        sort: String): OrderHistoryResult! @field(resolver:"App\\GraphQL\\Queries\\OrderHistory@resolve")

}




type Mutation {
    login(email: String!, password: String!): User! @field(resolver: "App\\GraphQL\\Mutations\\Login")

    registerUser(
        name: String!
        email: String!
        password: String!
        password_confirmation: String!
    ): UserResponse @field(resolver:"App\\GraphQL\\Mutations\\RegisterUser@resolve")

    verifyEmail(
        token: String!
    ): VerifyEmailPayload  @field(resolver:"App\\GraphQL\\Mutations\\VerifyEmail@resolve")

    addToCart(
        product_id: ID!
        quantity: Int!
    ): UserResponse @field(resolver:"App\\GraphQL\\Mutations\\AddToCart@resolve")

    addAddress(
        label: String!
        name: String!
        address_line1: String!
        address_line2: String
        city: String!
        state: String!
        postal_code: String!
        country: String!
        phone_number: String!
    ): Address @field(resolver:"App\\GraphQL\\Mutations\\AddAddress@resolve")


    logout: LogoutResponse @field(resolver: "App\\GraphQL\\Mutations\\Logout")

    checkout(
        input: CheckoutInput!
    ): OrderResponse! @field(resolver:"App\\GraphQL\\Mutations\\Checkout@resolve")


}


